name: Build Drogon

on:
  push:
    branches: [master, windows-ci]
  pull_request:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: '${{matrix.buildname}} - ${{matrix.link}}'
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        link: ['static', 'shared']
        include:
          - os: ubuntu-20.04
            buildname: 'ubuntu-20.04/gcc'
            triplet: x64-linux
            compiler: gcc_64
          - os: ubuntu-20.04
            buildname: 'ubuntu-20.04/gcc-10'
            triplet: x64-linux
          - os: ubuntu-16.04
            buildname: 'ubuntu-16.04/gcc'
            triplet: x64-linux
            compiler: gcc_64
          - os: macos-latest
            buildname: 'macos/clang'
            triplet: x64-osx
            compiler: clang_64
          - os: windows-latest
            buildname: 'windows/msvc'

    steps:
    - name: Checkout Drogon source code
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: (windows) Install dependencies
      if: runner.os == 'windows'
      run: |
        pip install conan

    - name: (macOS) Install dependencies
      if: runner.os == 'macOS'
      run: |
        brew install jsoncpp ossp-uuid brotli zlib
        brew install openssl lz4 mariadb sqlite3 postgresql hiredis
        brew install redis

    - name: (Linux) Install dependencies
      if: runner.os == 'Linux'
      run: |
        # Installing packages might fail as the github image becomes outdated
        sudo apt update
        # These aren't available or don't work well in vcpkg
        sudo apt install libjsoncpp-dev uuid-dev openssl libssl-dev zlib1g-dev postgresql-all libsqlite3-dev
        sudo apt install libbrotli-dev
    - name: (Linux) Install gcc-10
      if: matrix.buildname == 'ubuntu-20.04/gcc-10'
      run: |
        sudo apt install gcc-10 g++-10
    - name: (Linux) Install boost
      if: matrix.os == 'ubuntu-16.04'
      run: |
        sudo add-apt-repository ppa:mhier/libboost-latest
        sudo apt update
        sudo apt install boost1.67

    - name: install gtest
      if: runner.os != 'Windows'
      run: |
        wget https://github.com/google/googletest/archive/release-1.10.0.tar.gz
        tar xf release-1.10.0.tar.gz
        cd googletest-release-1.10.0
        cmake .
        make
        sudo make install

    - name: Create build directory
      run: |
        mkdir build

#    - name: (Windows) Create Build Environment & Configure Cmake
#      # Some projects don't allow in-source building, so create a separate build directory
#      # We'll use this as our working directory for all subsequent commands
#      shell: bash
#      working-directory: ${{env.GITHUB_WORKSPACE}}
#      if: runner.os == 'Windows'
#      run: |
#        mkdir build
#        cd build
#        C:/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat
#        conan install .. -scompiler="Visual Studio" -scompiler.version=16
#        [[ ${{ matrix.link }} == "SHARED" ]] && orm="OFF" && shared="ON" || (orm="ON" && shared="OFF")
#        cmake .. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_ORM=$orm -DBUILD_TESTING=on -DBUILD_DROGON_SHARED=$shared -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake

    - name: (Windows) Create Build Environment & Configure Cmake
      shell: cmake -P {0}
      working-directory: ./build
      if: runner.os == 'Windows'
      run: |
        set(ENV{CC} "cl")
        set(ENV{CXX} "cl")

        execute_process(
          COMMAND "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat" && set
          OUTPUT_FILE environment_script_output.txt
        )
        file(STRINGS environment_script_output.txt output_lines)
        foreach(line IN LISTS output_lines)
          if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
            set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
          endif()
        endforeach()

        if("${{ matrix.link }}" STREQUAL "SHARED")
          set(orm OFF)
          set(shared ON)
        else()
          set(orm ON)
          set(shared OFF)
        endif()

        execute_process(
          COMMAND
            conan install .. -scompiler=Visual\ Studio -scompiler.version=16
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

        execute_process(
          COMMAND
            cmake
              -S ..
              -D CMAKE_BUILD_TYPE=Release
              -G "Unix Makefiles"
              -D BUILD_ORM=${orm}
              -D BUILD_TESTING=on
              -D BUILD_DROGON_SHARED=${shared}
              -D CMAKE_TOOLCHAIN_FILE=conan_paths.cmake
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Create Build Environment & Configure Cmake
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      shell: bash
      working-directory: ${{env.GITHUB_WORKSPACE}}
      if: matrix.buildname != 'ubuntu-20.04/gcc-10' && runner.os != 'Windows'
      run: |
        mkdir build
        cd build
        [[ ${{ matrix.link }} == "SHARED" ]] && shared="ON" || shared="OFF"
        cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=on -DBUILD_DROGON_SHARED=$shared -DCMAKE_CXX_VISIBILITY_PRESET=hidden -DCMAKE_VISIBILITY_INLINES_HIDDEN=1

    - name: Create Build Environment & Configure Cmake (gcc-10)
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      shell: bash
      working-directory: ${{env.GITHUB_WORKSPACE}}
      if: matrix.buildname == 'ubuntu-20.04/gcc-10'
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=on -DCMAKE_CXX_FLAGS="-fcoroutines"
      env:
        CC: gcc-10
        CXX: g++-10

    - name: (Windows) Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: bash
      if: runner.os == 'Windows'
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        cd build
        cmake --build . --target install --parallel

    - name: (Linux) Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: bash
      if: runner.os != 'Windows'
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        cd build
        sudo make && sudo make install

    - name: Prepare for testing (macOS)
      if: runner.os == 'macOS'
      run: |
        brew tap homebrew/services;
        brew services restart postgresql;
        brew services start mariadb;
        brew services start redis;
        sleep 4;
        mariadb -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('')";
        mariadb -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost'";
        mariadb -e "FLUSH PRIVILEGES";
        brew services restart mariadb;
        sleep 4;
        psql -c 'create user postgres superuser;' postgres;

    - name: Prepare for testing (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo systemctl start postgresql
        sleep 1
        sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '12345'" postgres

    - name: Test
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: bash
      if: runner.os != 'windows'
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test.sh -t

    - name: Test
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: bash
      if: runner.os == 'windows'
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test.sh

    - name: Lint
      if: matrix.os == 'ubuntu-20.04'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: bash
      run: ./format.sh && git diff --exit-code
